name: Build and publish docker
description: This action should Build a docker image and publish to docker hub
inputs:
  image:
    description: 'Set the tag of the docker image'
    required: true
  npm_token:
    description: 'Npm Token'
    required: true
  docker_hub_password:
    description: 'Docker Hub Password'
    required: true
  docker_hub_user:
    description: 'Docker Hub User'
    required: true
  tags:
    description: 'Set the tags of the docker image'
    required: true
  registry:
    description: 'Set the image registry repository name, default is frontegg'
    required: false
    default: 'frontegg'
  image_file_path:
    description: 'Set the image build file path, for example ./Dockerfile'
    required: false
    default: './Dockerfile'

runs:
  using: "composite"
  steps:
    - name: "Prepare parameters"
      uses: actions/github-script@v6
      id: 'params'
      with:
        result-encoding: json
        script: |
          const inputs = ${{ toJSON(inputs) }};
          const repositoryName = inputs.registry;
          const imageName = `${repositoryName}/${inputs.image}`;
          const tags = inputs.tags.split("\n")
                            .map(s => s.replace(/^!\s+/, "!").trim())
                            .filter(x => x !== "")
                            .map(s => `${imageName}:${s}`);
          const result = { tags };
          console.log(`tags: ${tags}`);
          return result;

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.docker_hub_user }}
        password: ${{ inputs.docker_hub_password }}
    - name: Build .npmrc file
      run: |
        echo //registry.npmjs.org/:_authToken=${{ inputs.npm_token }} >> .npmrc
      shell: bash
    - name: Build production image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ${{ inputs.image_file_path }}
        # Set the desired build target here
        push: true
        build-args: |
          NPM_TOKEN=${{ inputs.npm_token }}
        tags: ${{ join( fromJSON(steps.params.outputs.result).tags, ',' ) }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
