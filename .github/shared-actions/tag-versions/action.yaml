name: Deploy to environment
description: This action should deploy the current branch to staging.
inputs:
  organization:
    description: "Set the organization name both in docker and github"
    required: false
    default: frontegg
  github_token:
    description: "The github token"
    required: true
  repository_name:
    description: "The repository name"
    required: true
  environment:
    description: "Environment"
    required: true
  docker_hub_user:
    description: "Docker Hub User"
    required: true
  docker_hub_password:
    description: "Docker Hub Password"
    required: true
  current_tag:
    description: "The Tag to use when creating a new version Tag and version"
    required: false
    default: ${GITHUB_SHA::7}
  should_tag_image:
    description: "Should tag the image with the new version"
    required: true
  should_tag_repository:
    description: "Should tag the repository with environment with new version"
    required: true

runs:
  using: "composite"
  steps:
    - name: Display Currnet SHA/Tag for current repository
      run: |
        echo Working in repository: ${{ github.repository }} on SHA/Tag: ${{ inputs.current_tag }} for
      shell: bash

    - name: Set variables
      id: variables
      run: |
        echo "new-tag=${{ inputs.environment }}-$(date +'%Y%m%d.%H%M%S')-${{ inputs.current_tag }}" >> $GITHUB_OUTPUT
        echo "registry=${{ inputs.organization }}/${{ inputs.repository_name }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Display variables
      run: |
        echo ${{ steps.variables.outputs.new-tag }}
        echo ${{ steps.variables.outputs.registry }}
      shell: bash

    - name: Checkout AppState
      uses: actions/checkout@v4
      with:
        repository: frontegg/AppState
        path: appState
        token: ${{ inputs.github_token }}

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   if: ${{ inputs.should_tag_image }}
    #   with:
    #     username: ${{ inputs.docker_hub_user }}
    #     password: ${{ inputs.docker_hub_password }}

    # - name: Tag docker image with versions
    #   shell: bash
    #   if: ${{ inputs.should_tag_image == 'true' }}
    #   run: |
    #     docker manifest create ${{ steps.variables.outputs.registry }}:${{ steps.variables.outputs.new-tag }} \
    #     ${{ steps.variables.outputs.registry }}:${{ inputs.current_tag }}
    #     docker manifest push ${{ steps.variables.outputs.registry }}:${{ steps.variables.outputs.new-tag }}

    - uses: oleksiyrudenko/gha-git-credentials@v2-latest
      with:
        global: true
        token: ${{ inputs.github_token }}

    - name: Tag github repository with version update
      working-directory: code
      run: |
        git tag ${{ steps.variables.outputs.new-tag }}
        git push origin refs/tags/${{ steps.variables.outputs.new-tag }}
      shell: bash

    - name: Tag github repository with latest environment Tag
      working-directory: code
      if: ${{ inputs.should_tag_repository == 'true' }}
      run: |
        git tag ${{ inputs.environment}} --force
        git push origin refs/tags/${{ inputs.environment }} --force
      shell: bash

    - name: Update appVersion in AppState
      env:
        DIRECTORY: "applications/${{ inputs.repository_name }}/${{ inputs.environment}}"
        APP_VERSION: ${{ inputs.current_tag }}
      shell: bash
      working-directory: appState
      run: |
        FILE="$DIRECTORY/values.yaml"

        # Check if directory exists, if not create it
        if [ ! -d "$DIRECTORY" ]; then
        echo "Directory does not exist. Creating directory..."
        mkdir -p "$DIRECTORY"
        fi

        # Check if file exists, if not create it with initial content
        if [ ! -f "$FILE" ]; then
        echo "File does not exist. Creating file with initial content..."
        echo "appVersion: \"$APP_VERSION\"\nworkflowRunId: \"$$GITHUB_RUN_ID\"" > "$FILE"
        else
        # File exists, update the appVersion value using yq
        echo "File exists. Updating appVersion value..."
        yq eval ".appVersion = \"$APP_VERSION\"" -i "$FILE"
        yq eval ".workflowRunId = \"$GITHUB_RUN_ID\"" -i "$FILE"
        fi

        echo "Operation completed."

    - name: Commit version to AppState
      shell: bash
      working-directory: appState
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor}}@users.noreply.github.com"
        git add .
        if ! git diff --cached --exit-code; then
          git commit -m "Update appVersion in AppState with ${{ inputs.current_tag }}"
          git fetch origin
          git rebase origin/master
          git push origin master
        else
          echo "No changes to commit"
        fi

    - name: Tag github repository with venv Tag
      working-directory: code
      if: ${{ inputs.environment == 'staging' }}
      run: |
        git tag venv-latest --force
        git push origin refs/tags/venv-latest --force
      shell: bash
