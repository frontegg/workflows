name: Main Service Deployment Workflow

on:
  workflow_call:
    inputs:
      tag:
        required: false
        type: string
      repository_name:
        type: string
        required: true
      has_hybrid:
        required: false
        default: false
        type: boolean
      staging_environment_name:
        required: false
        default: staging
        type: string
      au_environment_name:
        required: false
        default: production-au
        type: string
      deploy_au:
        required: false
        default: true
        type: boolean
      deploy_us:
        required: false
        default: true
        type: boolean
      us_environment_name:
        required: false
        default: production-us
        type: string
      global_environment_name:
        required: false
        default: production-global
        type: string
      build_image_script:
        required: false
        default: ./ci/build-and-publish-image.sh
        type: string
      build_hybrid_image_script:
        required: false
        default: ./ci/build-and-publish-hybrid-image.sh
        type: string
      ref:
        required: true
        type: string
      workflows_version:
        required: false
        type: string
        default: ""
      code_changed:
        required: true
        type: boolean
      chart_changed:
        required: true
        type: boolean
    secrets:
      npm_token:
        description: "Npm Token"
        required: true
      docker_hub_password:
        description: "Docker Hub Password"
        required: true
      docker_hub_user:
        description: "Docker Hub User"
        required: true
      admin_github_token:
        description: "Github repository admin token"
        required: true
      slack_production_webhook:
        description: "Slack webhook token"
        required: false
      split_api_key:
        description: "Split.io SDK key"
        required: true
      split_eval_key:
        description: "Split.io staging env key"
        required: true
      checkly_api_key:
        description: "Checkly API key"
        required: true
      checkly_account_id:
        description: "Checkly account ID"
        required: true

jobs:
  params:
    name: Generate deployment params
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.short-sha.outputs.short_sha }}
    steps:
      - name: Checkout ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          repository: frontegg/${{ inputs.repository_name }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.admin_github_token }}
      - name: Get short SHA from tag or commit
        id: get-code-sha
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
      - name: Parse short sha
        id: short-sha
        run: |
          if [ -z "${{ inputs.tag }}" ]
          then
            echo "short_sha=${{ steps.get-code-sha.outputs.sha }}" >> $GITHUB_OUTPUT
          else
            echo "short_sha=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          fi
      - run: echo short sha - ${{ steps.short-sha.outputs.short_sha }}

  build-and-publish-docker:
    name: Build and publish docker image
    runs-on: ubuntu-latest
    needs: [params]
    steps:
      - name: Checkout ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          repository: frontegg/${{ inputs.repository_name }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.admin_github_token }}
      - name: Checkout workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
          ref: ${{ inputs.workflows_version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker_hub_user }}
          password: ${{ secrets.docker_hub_password }}
      - name: Check Docker Image
        id: check-image
        run: |
          if docker manifest inspect 'frontegg/${{inputs.repository_name}}:${{needs.params.outputs.short_sha}}' > /dev/null 2>&1; then
            echo "Docker image exists, no need to build the image"
            echo "image-exist=true" >> $GITHUB_OUTPUT
          else
            echo "Docker image does not exist, starting to build the image"
            echo "image-exist=false" >> $GITHUB_OUTPUT
          fi
      - name: build and publish docker image
        uses: ./workflows/.github/shared-actions/build-and-publish-docker
        if: ${{ steps.check-image.outputs.image-exist == 'false' }}
        with:
          tag: ${{ needs.params.outputs.short_sha }}
          build_image_script: ${{ inputs.build_image_script }}
          npm_token: ${{ secrets.npm_token }}
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          repository: ${{ inputs.repository_name }}

  build-and-publish-hybrid-docker:
    name: Build and publish hybrid docker image
    needs: [params]
    runs-on: ubuntu-latest
    if: false #inputs.has_hybrid
    steps:
      - name: Display Current Tag/SHA
        run: echo Tag/SHA ${{ needs.params.outputs.short_sha }}
        shell: bash
      - name: Checkout ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          repository: frontegg/${{ inputs.repository_name }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.admin_github_token }}
      - name: Set variables
        id: variables
        run: |
          HYBRID_VERSION=$(date +%Y.%-m.%-d%H%M%S)
          echo "version=${HYBRID_VERSION}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Build and push docker image with tag ${{ needs.params.outputs.short_sha }}
        run: |
          sudo chmod +x ${{ inputs.build_hybrid_image_script }}
          ${{ inputs.build_hybrid_image_script }}
        shell: bash
        env:
          DOCKER_HUB_USER: ${{ secrets.docker_hub_user }}
          DOCKER_HUB_PASSWORD: ${{ secrets.docker_hub_password }}
          HYBRID_VERSION: ${{ steps.variables.outputs.version }}
          NPM_TOKEN: ${{ secrets.npm_token }}
          TAG_NAME: ${{ github.ref_name }}
          COMMIT_HASH: ${{ needs.params.outputs.short_sha }}
      - name: Tag Hybrid
        run: |
          git tag hybrid-${{ steps.variables.outputs.version }}
          git push origin refs/tags/hybrid-${{ steps.variables.outputs.version }}
        shell: bash

  publish-hybrid-helm-chart:
    name: Publish hybrid helm chart changes
    needs: [build-and-publish-hybrid-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          repository: frontegg/${{ inputs.repository_name }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.admin_github_token }}
          path: code
      - name: Checkout workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
          ref: ${{ inputs.workflows_version }}
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          working-directory: code
          filters: |
            chart:
              - 'k8s/**'
      - name: Publish hybrid helm chart
        if: steps.filter.outputs.chart == 'true'
        uses: ./workflows/.github/shared-actions/publish-hybrid-helm-chart
        with:
          github_token: ${{ secrets.admin_github_token }}
          repository_name: ${{ inputs.repository_name }}

  deploy-to-staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.staging_environment_name }}
    needs:
      - params
      - build-and-publish-docker
    steps:
      - name: Check Deployment Validation
        id: evaluator
        uses: frontegg/split-evaluator-action@main
        with:
          api-key: ${{ secrets.split_api_key }}
          key: ${{ secrets.split_eval_key }}
          environment: ${{ inputs.staging_environment_name }}
          feature-flags: |
            allow-deployments
      - name: Should Deploy
        if: ${{ env.allow-deployments != 'on' }}
        run: |
          echo deployments are not allowed at this time. Please contact the team
          echo "::error Deployments are not allowed at this time. It's probably Raz's fault"
          exit 1
      - name: Checkout ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          path: code
          repository: frontegg/${{ inputs.repository_name }}
          ref: ${{ inputs.ref }}
          fetch-tags: true
          fetch-depth: 2
          token: ${{ secrets.admin_github_token }}
      - name: Checkout workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
          ref: ${{ inputs.workflows_version }}
      - name: extract latest commits
        run: |
          commits=$(git log staging..master  --pretty=format:"%C(auto)%h | %C(bold blue)%an | %C(green)%ar | %C(reset)%s" | tee)
          echo "diff_commits=$commits" >> $GITHUB_ENV
        working-directory: ./code
      - name: "Deploy to staging"
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.admin_github_token }}
          repository_name: ${{ inputs.repository_name }}
          environment: ${{ inputs.staging_environment_name }}
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ needs.params.outputs.short_sha }}
          should_tag_image: true
          should_tag_repository: ${{ inputs.chart_changed }}
      - name: Assign variable
        id: secret
        run: echo "secret=${{ secrets.slack_production_webhook }}" >> $GITHUB_OUTPUT
      - name: Notify Slack on deployment
        if: steps.secret.outputs.secret
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: Production
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE: |
            '${{ github.actor }} has deployed ${{ inputs.repository_name }} to staging :rocket:'
            Commits: 
            ${{ env.diff_commits }}
          SLACK_TITLE: ${{ inputs.repository_name }} to staging
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.slack_production_webhook }}
          MSG_MINIMAL: Commit,actions url

  deploy-to-australia:
    name: Deploy to Australia Region (Sydney)
    if: ${{ inputs.deploy_au }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.au_environment_name }}
    needs:
      - params
      - deploy-to-staging
    steps:
      - name: Check Deployment Validation
        id: evaluator
        uses: frontegg/split-evaluator-action@main
        with:
          api-key: ${{ secrets.split_api_key }}
          key: ${{ secrets.split_eval_key }}
          environment: ${{ inputs.au_environment_name }}
          feature-flags: |
            allow-deployments
      - name: Should Deploy
        if: ${{ env.allow-deployments != 'on' }}
        run: |
          echo deployments are not allowed at this time. Please contact the team
          echo "::error Deployments are not allowed at this time. It's probably Raz's fault"
          exit 1
          
      - name: Pre Deployment Validation - Checkly
        id: pre-deployment-validator
        uses: frontegg/pre-deploy-workflow-checks@master
        with:
          checkly-api-key: ${{ secrets.checkly_api_key }}
          checkly-account-id: ${{ secrets.checkly_account_id }}
          environment: ${{ inputs.staging_environment_name }}
          
      - name: Verify Pre Deployment Validation - Checkly
        if: ${{ steps.pre-deployment-validator.outputs.result == 'failure' }}
        run: |
          echo "Pre deployment validation failed. You cannot proceed."
          echo "Check the Checkly dashboard here: https://g03dtl52.checkly-dashboards.com/"
          echo "If checks on Checkly are red, please investigate and fix the issues and try again."
          exit 1

      - name: Checkout Stress Tests
        uses: actions/checkout@v4
        with:
          repository: 'frontegg/stress-tests'
          path: stress-tests
          token: ${{ secrets.admin_github_token }}
      - name: Setup K6
        uses: grafana/setup-k6-action@v1
      - name: Run Stress Tests
        run: |
          k6 run -o experimental-prometheus-rw --tag testid="sug-customer-flow" --out json=results.json  -c ./stress-tests/tests/options.json ./stress-tests/tests/customer-flow-sug-test.js
        env:
          K6_PROMETHEUS_RW_SERVER_URL: http://vmagent-vm.observability.svc:8429/api/v1/write
          K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM: false
          K6_PROMETHEUS_RW_TREND_STATS: p(99),p(90),avg,min,max
          CLIENT_ID: 3e17e4b7-629c-4f76-8230-9923c2098af3
          SECRET: f0b820ff-0534-4af9-aa66-967f4a539ff5
          ROLE_IDS: 0aef1e4b-6a1d-41e8-99b2-87e9c9495d3e
          VENDOR_HOST: https://fronteggers.stg.frontegg.com
          API_BASE_URL: https://api.stg.frontegg.com
      - name: Verify Stress Test Success
        if: failure()
        run: |
          echo "Stress tests failed! You cannot proceed."
          echo "Check the stress test results here: https://github.com/frontegg/stress-tests/actions/runs/${{ github.run_id }}"
          exit 1
          
      - name: Checkout ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          path: code
          repository: frontegg/${{ inputs.repository_name }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.admin_github_token }}
          fetch-tags: true
          fetch-depth: 2
      - name: Checkout workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
          ref: ${{ inputs.workflows_version }}
      - name: extract latest commits
        run: |
          commits=$(git log ${{ inputs.au_environment_name }}..master  --pretty=format:"%C(auto)%h | %C(bold blue)%an | %C(green)%ar | %C(reset)%s" | tee)
          echo "diff_commits=$commits" >> $GITHUB_ENV
        working-directory: ./code
      - name: "Deploy to Production AU"
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.admin_github_token }}
          repository_name: ${{ inputs.repository_name }}
          environment: ${{ inputs.au_environment_name }}
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ needs.params.outputs.short_sha }}
          should_tag_image: true
          should_tag_repository: ${{ inputs.chart_changed }}
      - name: "Deploy to UK"
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.admin_github_token }}
          repository_name: ${{ inputs.repository_name }}
          environment: production-uk
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ needs.params.outputs.short_sha }}
          should_tag_image: true
          should_tag_repository: ${{ inputs.chart_changed }}
      - name: Assign variable
        id: secret
        run: echo "secret=${{ secrets.slack_production_webhook }}" >> $GITHUB_OUTPUT
      - name: Notify Slack on deployment
        if: steps.secret.outputs.secret
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: Production
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE: |
            ${{ github.actor }} has deployed ${{ inputs.repository_name }} to ${{ inputs.au_environment_name }} :rocket:
            Commits: 
            ${{ env.diff_commits }}
          SLACK_TITLE: ${{ inputs.repository_name }} to ${{ inputs.au_environment_name }}
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.slack_production_webhook }}
          MSG_MINIMAL: Commit,actions url

  deploy-to-us:
    name: Deploy to US East 1
    if: ${{ always() && inputs.deploy_us && (needs.deploy-to-australia.result == 'success' || needs.deploy-to-australia.result == 'skipped') }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.us_environment_name }}
    needs:
      - params
      - deploy-to-staging
      - deploy-to-australia
    steps:
      - name: Check Deployment Validation
        id: evaluator
        uses: frontegg/split-evaluator-action@main
        with:
          api-key: ${{ secrets.split_api_key }}
          key: ${{ secrets.split_eval_key }}
          environment: ${{ inputs.us_environment_name }}
          feature-flags: |
            allow-deployments
      - name: Should Deploy
        if: ${{ env.allow-deployments != 'on' }}
        run: |
          echo deployments are not allowed at this time. Please contact the team
          echo "::error Deployments are not allowed at this time. It's probably Raz's fault"
          exit 1
      - name: Pre Deployment Validation
        id: pre-deployment-validator
        uses: frontegg/pre-deploy-workflow-checks@master
        with:
          checkly-api-key: ${{ secrets.checkly_api_key }}
          checkly-account-id: ${{ secrets.checkly_account_id }}
          environment: ${{ inputs.au_environment_name }}
      - name: Verify Pre Deployment Validation
        if: ${{ steps.pre-deployment-validator.outputs.result == 'failure' }}
        run: |
          echo "Pre deployment validation failed. You cannot proceed."
          echo "Check the Checkly dashboard here: https://g03dtl52.checkly-dashboards.com/"
          echo "If checks on Checkly are red, please investigate and fix the issues and try again."
          exit 1
      - name: Checkout ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          path: code
          repository: frontegg/${{ inputs.repository_name }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.admin_github_token }}
          fetch-tags: true
          fetch-depth: 2
      - name: Checkout workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
          ref: ${{ inputs.workflows_version }}
      - name: extract latest commits
        run: |
          commits=$(git log ${{ inputs.us_environment_name }}..master  --pretty=format:"%C(auto)%h | %C(bold blue)%an | %C(green)%ar | %C(reset)%s" | tee)
          echo "diff_commits=$commits" >> $GITHUB_ENV
        working-directory: ./code
      - name: "Deploy to Production US"
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.admin_github_token }}
          repository_name: ${{ inputs.repository_name }}
          environment: ${{ inputs.us_environment_name }}
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ needs.params.outputs.short_sha }}
          should_tag_image: true
          should_tag_repository: ${{ inputs.chart_changed }}
      - name: Assign variable
        id: secret
        run: echo "secret=${{ secrets.slack_production_webhook }}" >> $GITHUB_OUTPUT
      - name: Notify Slack on deployment
        if: steps.secret.outputs.secret
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: Production
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE: |
            ${{ github.actor }} has deployed ${{ inputs.repository_name }} to ${{ inputs.us_environment_name }} :rocket:
            Commits: 
            ${{ env.diff_commits }}
          SLACK_TITLE: ${{ inputs.repository_name }} to ${{ inputs.us_environment_name }}
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.slack_production_webhook }}
          MSG_MINIMAL: Commit,actions url

  deploy-to-global:
    name: Deploy to All Global Environments
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.deploy-to-us.result == 'success' || needs.deploy-to-us.result == 'skipped') }}
    environment:
      name: ${{ inputs.global_environment_name }}
    needs:
      - params
      - deploy-to-staging
      - deploy-to-us
    steps:
      - name: Check Deployment Validation
        id: evaluator
        uses: frontegg/split-evaluator-action@main
        with:
          api-key: ${{ secrets.split_api_key }}
          key: ${{ secrets.split_eval_key }}
          environment: ${{ inputs.global_environment_name }}
          feature-flags: |
            allow-deployments
      - name: Should Deploy
        if: ${{ env.allow-deployments != 'on' }}
        run: |
          echo deployments are not allowed at this time. Please contact the team
          echo "::error Deployments are not allowed at this time. It's probably Raz's fault"
          exit 1
      - name: Pre Deployment Validation
        id: pre-deployment-validator
        uses: frontegg/pre-deploy-workflow-checks@master
        with:
          checkly-api-key: ${{ secrets.checkly_api_key }}
          checkly-account-id: ${{ secrets.checkly_account_id }}
          environment: ${{ inputs.us_environment_name }}
      - name: Verify Pre Deployment Validation
        if: ${{ steps.pre-deployment-validator.outputs.result == 'failure' }}
        run: |
          echo "Pre deployment validation failed. You cannot proceed."
          echo "Check the Checkly dashboard here: https://g03dtl52.checkly-dashboards.com/"
          echo "If checks on Checkly are red, please investigate and fix the issues and try again."
          exit 1
      - name: Checkout ${{ inputs.repository_name }}
        uses: actions/checkout@v4
        with:
          path: code
          repository: frontegg/${{ inputs.repository_name }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.admin_github_token }}
          fetch-tags: true
          fetch-depth: 2
      - name: Checkout workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
          ref: ${{ inputs.workflows_version }}
      - name: extract latest commits
        run: |
          commits=$(git log ${{ inputs.global_environment_name }}..master  --pretty=format:"%C(auto)%h | %C(bold blue)%an | %C(green)%ar | %C(reset)%s" | tee)
          echo "diff_commits=$commits" >> $GITHUB_ENV
        working-directory: ./code
      - name: "Deploy to Production Global"
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.admin_github_token }}
          repository_name: ${{ inputs.repository_name }}
          environment: ${{ inputs.global_environment_name }}
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ needs.params.outputs.short_sha }}
          should_tag_image: true
          should_tag_repository: ${{ inputs.chart_changed }}
      - name: Assign variable
        id: secret
        run: echo "secret=${{ secrets.slack_production_webhook }}" >> $GITHUB_OUTPUT
      - name: Notify Slack on deployment
        if: steps.secret.outputs.secret
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: Production
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE: |
            ${{ github.actor }} has deployed ${{ inputs.repository_name }} to ${{ inputs.global_environment_name }} :rocket:
            Commits: 
            ${{ env.diff_commits }}
          SLACK_TITLE: ${{ inputs.repository_name }} to ${{ inputs.global_environment_name }}
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.slack_production_webhook }}
          MSG_MINIMAL: Commit,actions url
