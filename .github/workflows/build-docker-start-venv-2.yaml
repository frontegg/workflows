name: Build docker image and Start Frontegg's Virtual Environment

on:
  workflow_call:
    inputs:
      tag:
        type: string
        required: false
        description: 'Set the tag in which the Docker image will be tag with'
      volatileEnvironment:
        type: boolean
        required: false
        description: 'Creates a Volatile environment not related to other branches, ingresses will get the value of x.random.domain'
        default: false
      envDomain:
        type: string
        required: false
        description: 'Set the environment domain so for ingress hosts, for example domain xxx.com will set portal.hash.xxx.com'
        default: "venv.life"
      terminationProtection:
        type: boolean
        required: false
        description: 'Termination protection prevents the environment to be shut down after default time'
        default: false
      leaseTime:
        type: string
        required: false
        description: 'Lease Time is the amount of hours the venv should be running, minimum is one hour and maximum is 6, default is 1 hour'
        default: "1"
      build_image_script:
        required: false
        default: ./ci/build-and-publish-image.sh
        type: string
      disableDashboard:
        type: boolean
        required: false
        description: 'Set to true in order to disable starting dashboard application'
        default: false
      ref:
        type: string
        required: false
        description: 'Set the branch name to start the venv from, leave empty to get current branch name'
        default: ''
    secrets:
      admin_github_token:
        description: 'Github repository admin token'
        required: true
      argocd_password:
        description: 'ArgoCD password'
        required: true
      npm_token:
        description: 'Npm Token'
        required: true
      docker_hub_password:
        description: 'Docker Hub Password'
        required: true
      docker_hub_user:
        description: 'Docker Hub User'
        required: true
      slack_webhook:
        description: 'Set the slack channel token to enable notification'
        required: false
    outputs:
      apiUrl:
        value: ${{ jobs.start-venv.outputs.apiUrl }}
        description: 'Outputs the apiUrl of the newly created venv'
      environmentId:
        value: ${{ jobs.start-venv.outputs.environmentId }}
        description: 'Outputs the environmentId of the newly created venv'
      portalUrl:
        value: ${{ jobs.start-venv.outputs.portalUrl }}
        description: 'Outputs the portalUrl of the newly created venv'
jobs:
  start-venv:
    concurrency: start-venv
    name: start venv
    runs-on: ubuntu-latest
    outputs:
      environmentId: ${{ steps.venv-actions.outputs.environmentId }}
      portalUrl: ${{ steps.venv-actions.outputs.portalUrl }}
      apiUrl: ${{ steps.venv-actions.outputs.apiUrl }}
      commits: ${{ steps.params.outputs.result }}
    steps:
      - name: Checkout Workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
      - uses: ./workflows/.github/shared-actions/start-venv-2
        name: Generate venv files
        id: venv-actions
        with:
          admin_github_token: ${{ secrets.admin_github_token }}
          volatileEnvironment: ${{ inputs.volatileEnvironment }}
          envDomain: ${{ inputs.envDomain }}
          terminationProtection: ${{ inputs.terminationProtection }}
          leaseTime: ${{ inputs.leaseTime }}
          venvRepoDirectory: ${{ github.workspace }}/venv/environments
          disableDashboard: ${{ inputs.disableDashboard }}
          ref: ${{ inputs.ref }}
      - name: Generate matrix
        uses: actions/github-script@v7
        id: 'params'
        with:
          result-encoding: string
          script: |
            const value = "${{ steps.venv-actions.outputs.commits }}";
            if( value === "" ) {
              const skipResult = { commits: ['skip'] };
              console.log(`result: ${JSON.stringify(skipResult)}`);
              return JSON.stringify(skipResult);
            }
            const splitString = value.split(',');          
            const result = { commits: splitString.map(x => x.toString()) };
            console.log(`result: ${JSON.stringify(result)}`);
            return JSON.stringify(result);

  xxx:
    name: xxx
    runs-on: ubuntu-latest
    needs: [ start-venv ]
    steps:
      - name: xxx
        run: |
          echo ${{ needs.start-venv.outputs.commits }}

  build-docker:
    name: Build services docker images for venv ${{ matrix.commits }}
    needs: [ start-venv ]
    if: ${{ fromJSON(needs.start-venv.outputs.commits) != 'skip' }}
    strategy:
      fail-fast: true
      matrix: ${{fromJSON(needs.start-venv.outputs.commits)}}
    runs-on: ubuntu-latest
    steps:
      - name: Split repository name and commit hash
        uses: actions/github-script@v7
        if: ${{ matrix.commits != 'skip' }}
        id: 'params'
        with:
          result-encoding: json
          script: |
            const value = "${{ matrix.commits }}";
            console.log(value);
            const splitString = value.split(':');
            console.log(splitString);
            const result = { repository: splitString[0], hash: splitString[1], image: `frontegg/${splitString[0]}:venv-${splitString[1].substring(0, 7)}` };
            console.log(`result: ${JSON.stringify(result)}`);
            return result;
      - name: Checkout Repository
        if: ${{ matrix.commits != 'skip' }}
        uses: actions/checkout@v4
        with:
          repository: frontegg/${{ fromJSON(steps.params.outputs.result).repository }}
          ref: ${{ fromJSON(steps.params.outputs.result).hash }}
          token: ${{ secrets.admin_github_token }}
      - name: Set up QEMU
        if: ${{ matrix.commits != 'skip' }}
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        if: ${{ matrix.commits != 'skip' }}
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        if: ${{ matrix.commits != 'skip' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker_hub_user }}
          password: ${{ secrets.docker_hub_password }}
      - name: Check Docker Image
        if: ${{ matrix.commits != 'skip' }}
        id: check-image
        run: |
          if docker manifest inspect ${{fromJSON(steps.params.outputs.result).image}} > /dev/null 2>&1; then
            echo "Docker image exists, no need to build the image"
            echo "image-exist=true" >> $GITHUB_OUTPUT
          else
            echo "Docker image does not exist, starting to build the image"
            echo "image-exist=false" >> $GITHUB_OUTPUT
          fi
      - name: Generate npmrc
        if: ${{ matrix.commits != 'skip' }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.npm_token }}" > .npmrc
      - name: Build and push
        uses: docker/build-push-action@v5
        if: ${{ steps.check-image.outputs.image-exist == 'false' }} && ${{ matrix.commits != 'skip' }}
        with:
          context: .
          push: true
          tags: ${{fromJSON(steps.params.outputs.result).image}}

  wait:
    name: waiting for venv readiness
    needs: [start-venv, build-docker]
    if: always() && (needs.build-docker.result == 'success' || needs.build-docker.result == 'skipped')
    runs-on: [self-hosted, dev]
    steps:
      - name: Checkout Workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
      - name: wait for venv readiness
        uses: ./workflows/.github/shared-actions/wait-for-venv
        with:
          argocd_password: ${{ secrets.argocd_password }}
          environmentId: ${{ needs.start-venv.outputs.environmentId }}
          apiUrl: ${{ needs.start-venv.outputs.apiUrl }}

  notify-success:
    name: Notify outcome
    if: success()
    runs-on: ubuntu-latest
    needs: [ wait, start-venv ]
    steps:
      - name: Assign variable
        id: secret
        run: echo '::set-output name=secret::${{ secrets.slack_webhook }}'
      - name: Notify Slack on deployment
        if: steps.secret.outputs.secret
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: Production
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE: |
            ${{ github.actor }} your venv is ready. :tada:
            You can access the portal at ${{ needs.start-venv.outputs.portalUrl }}
          SLACK_TITLE: |
            Yay, ${{ github.actor }} your venv is ready.
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.slack_webhook }}
          MSG_MINIMAL: actions url

  notify-failure:
    name: Notify outcome
    if: failure()
    runs-on: ubuntu-latest
    needs: [ wait, start-venv ]
    steps:
      - name: Assign variable
        id: secret
        run: echo '::set-output name=secret::${{ secrets.slack_webhook }}'
      - name: Notify Slack on deployment
        if: steps.secret.outputs.secret
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: Production
          SLACK_COLOR: "FB3105"
          SLACK_ICON: https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE: |
            Listen ${{ github.actor }}, your venv has failed. :skull:
            It's probably becasue you made a mistake or that you are a bad person!
          SLACK_TITLE: |
            Hey, ${{ github.actor }} your venv has failed.
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.slack_webhook }}
          MSG_MINIMAL: actions url

  remove-venv:
    name: Remove Venv if failed
    if: failure()
    runs-on: ubuntu-latest
    needs: [ notify-failure, start-venv ]
    steps:
      - name: Checkout Workflows
        uses: actions/checkout@v4
        with:
          repository: frontegg/workflows
          path: workflows
      - uses: ./workflows/.github/shared-actions/remove-single-venv
        name: Remove venv files
        id: venv-actions
        with:
          admin_github_token: ${{ secrets.admin_github_token }}
          venvRepoDirectory: ${{ github.workspace }}/venv/environments
          venvId: ${{ needs.start-venv.outputs.environmentId }}
