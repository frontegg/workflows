name: Main Service Deployment Workflow

on:
  workflow_call:
    inputs:
      tag:
        required: false
        type: string
      repository_name:
        type: string
        required: true
      has_hybrid:
        required: false
        default: false
        type: boolean
      staging_environment_name:
        required: false
        default: staging
        type: string
      first_environment_name:
        required: false
        default: production-us
        type: string
      global_environment_name:
        required: false
        default: production-global
        type: string
      build_image_script:
        required: false
        default: ./ci/build-and-publish-image.sh
        type: string
      build_hybrid_image_script:
        required: false
        default: ./ci/build-and-publish-hybrid-image.sh
        type: string
    secrets:
      npm_token:
        description: 'Npm Token'
        required: true
      docker_hub_password:
        description: 'Docker Hub Password'
        required: true
      docker_hub_user:
        description: 'Docker Hub User'
        required: true
      admin_github_token:
        description: 'Github repository admin token'
        required: true
      slack_production_webhook:
        description: 'Slack webhook token'
        required: false

jobs:
  params:
    name: Prepare Parmas
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.short-sha.outputs.short_sha }}
    steps:
      - name: Parse short sha
        id: short-sha
        run: |
          if [ -z "${{ inputs.tag }}" ]
          then
            echo "::set-output name=short_sha::${GITHUB_SHA::7}"
          else
            echo "::set-output name=short_sha::$(${{ inputs.tag }})"
          fi

  build-and-publish-docker:
    name: Build and publish docker image
    runs-on: ubuntu-latest
    needs: [params]
    steps:
      - name: Display Current Tag/SHA
        run: echo Tag/SHA ${{ needs.params.outputs.short_sha }}
        shell: bash
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build and push docker image
        run: |
          echo commit hash: ${COMMIT_HASH}
          echo tag: ${TAG_NAME}
          echo branch: ${BRANCH_NAME}
          sudo chmod +x ${{ inputs.build_image_script }}
          ${{ inputs.build_image_script }}
        shell: bash
        env:
          COMMIT_HASH: ${{ needs.params.outputs.short_sha }}
          NPM_TOKEN: ${{ secrets.npm_token }}
          TAG_NAME: ${{ github.ref_name }}
          DOCKER_HUB_USER: ${{ secrets.docker_hub_user }}
          DOCKER_HUB_PASSWORD: ${{ secrets.docker_hub_password }}

  build-and-publish-hybrid-docker:
    name: Build and publish hybrid docker image
    needs: [params]
    runs-on: ubuntu-latest
    if: inputs.has_hybrid
    steps:
      - name: Display Current Tag/SHA
        run: echo Tag/SHA ${{ needs.params.outputs.short_sha }}
        shell: bash
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set variables
        id: variables
        run: |
          HYBRID_VERSION=$(date +%Y.%-m.%-d%H%M%S)
          echo ::set-output name=version::"${HYBRID_VERSION}"
        shell: bash
      - name: Build and push docker image with tag ${{ needs.params.outputs.short_sha }}
        run: |
          sudo chmod +x ${{ inputs.build_hybrid_image_script }}
          ${{ inputs.build_hybrid_image_script }}
        shell: bash
        env:
          DOCKER_HUB_USER: ${{ secrets.docker_hub_user }}
          DOCKER_HUB_PASSWORD: ${{ secrets.docker_hub_password }}
          HYBRID_VERSION: ${{ steps.variables.outputs.version }}
          NPM_TOKEN: ${{ secrets.npm_token }}
          TAG_NAME: ${{ github.ref_name }}
          COMMIT_HASH: ${{ needs.params.outputs.short_sha }}
      - name: Tag Hybrid
        run: |
          git tag hybrid-${{ steps.variables.outputs.version }}
          git push origin refs/tags/hybrid-${{ steps.variables.outputs.version }}
        shell: bash

  publish-hybrid-helm-chart:
    name: Publish hybrid helm chart changes
    needs: [ build-and-publish-hybrid-docker ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: code
      - name: Checkout workflows
        uses: actions/checkout@v3
        with:
          repository: frontegg/workflows
          path: workflows
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          working-directory: code
          filters: |
            chart:
              - 'k8s/**'
      - name: Publish hybrid helm chart
        if: steps.filter.outputs.chart == 'true'
        uses: ./workflows/.github/shared-actions/publish-hybrid-helm-chart
        with:
          github_token: ${{ secrets.admin_github_token }}
          repository_name: ${{ inputs.repository_name }}

  deploy-to-staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.staging_environment_name }}
    needs:
      - params
      - build-and-publish-docker
    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
        with:
          path: code
      - name: Checkout workflows
        uses: actions/checkout@v3
        with:
          repository: frontegg/workflows
          path: workflows
      - name: 'Deploy to staging'
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository_name: ${{ inputs.repository_name }}
          environment: staging
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ needs.params.outputs.short_sha }}

  deploy-to-us:
    name: Deploy to US East 1
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.first_environment_name }}
    needs:
      - params
      - deploy-to-staging
    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
        with:
          path: code
      - name: Checkout workflows
        uses: actions/checkout@v3
        with:
          repository: frontegg/workflows
          path: workflows
      - name: 'Deploy to Production US'
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository_name: ${{ inputs.repository_name }}
          environment: production-us
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ needs.params.outputs.short_sha }}
      - name: Notify Slack on deployment
        if:  secrets.slack_production_webhook != undefined
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: Production
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE: '${{ github.actor }} has deployed ${{ inputs.repository_name }} to ${{ inputs.first_environment_name }} :rocket:'
          SLACK_TITLE: ${{ inputs.repository_name }} to ${{ inputs.global_environment_name }}
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.slack_production_webhook }}

  deploy-to-global:
    name: Deploy to All Global Environments
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.global_environment_name }}
    needs:
      - params
      - deploy-to-staging
    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
        with:
          path: code
      - name: Checkout workflows
        uses: actions/checkout@v3
        with:
          repository: frontegg/workflows
          path: workflows
      - name: 'Deploy to Production Global'
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository_name: ${{ inputs.repository_name }}
          environment: production-global
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ needs.params.outputs.short_sha }}
      - name: Notify Slack on deployment
        if: secrets.slack_production_webhook != undefined
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: Production
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE: '${{ github.actor }} has deployed ${{ inputs.repository_name }} to ${{ inputs.global_environment_name }} :rocket:'
          SLACK_TITLE: ${{ inputs.repository_name }} to ${{ inputs.global_environment_name }}
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.slack_production_webhook }}

