name: POC for main workflow

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      repository_name:
        type: string
        required: true
      has_hybrid:
        required: false
        default: false
        type: boolean
    secrets:
      npm_token:
        description: 'Npm Token'
        required: true
      docker_hub_password:
        description: 'Docker Hub Password'
        required: true
      docker_hub_user:
        description: 'Docker Hub User'
        required: true

jobs:
  build-docker:
    name: Build and publish docker image
    runs-on: ubuntu-latest
    steps:
      - name: Display Current Tag/SHA
        run: echo Tag/SHA ${{ inputs.tag }}
        shell: bash
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build and push docker image with tag ${{ inputs.tag }}
        run: |
          make build-docker-image NPM_TOKEN=${{ secrets.npm_token }} COMMIT_HASH=${{ inputs.tag }} TAG_NAME=${{ env.BRANCH_NAME }}
          make push-docker-image
        shell: bash
        env:
          COMMIT_HASH: ${{ github.sha }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
          DOCKER_HUB_USER: ${{ secrets.docker_hub_user }}
          DOCKER_HUB_PASSWORD: ${{ secrets.docker_hub_password }}

  build-hybrid-docker:
    name: Build and publish hybrid docker image
    runs-on: ubuntu-latest
    if: inputs.has_hybrid
    steps:
      - name: Display Current Tag/SHA
        run: echo Tag/SHA ${{ inputs.tag }}
        shell: bash
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build and push docker image with tag ${{ inputs.tag }}
        id: build-docker
        run: |
          HYBRID_VERSION=$(date +%Y.%-m.%-d%H%M%S)
          echo ${HYBRID_VERSION}
          echo ::set-output name=version::"${HYBRID_VERSION}"
          make build-hybrid-docker-image NPM_TOKEN=${{ secrets.npm_token }} \
          COMMIT_HASH=${{ inputs.tag }} \
          TAG_NAME=${{ env.BRANCH_NAME }} \
          HYBRID_VERSION=${HYBRID_VERSION}
          make push-hybrid-docker-image
        shell: bash
        env:
          DOCKER_HUB_USER: ${{ secrets.docker_hub_user }}
          DOCKER_HUB_PASSWORD: ${{ secrets.docker_hub_password }}
      - name:
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a hybrid-${{ steps.build-docker.outputs.version }}
          git push origin refs/tags/hybrid-${{ steps.build-docker.outputs.version }}
        shell: bash

  deploy-to-staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs:
      - build-docker
    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
        with:
          path: code
      - name: Checkout workflows
        uses: actions/checkout@v3
        with:
          repository: frontegg/workflows
          path: workflows
      - name: 'Deploy to staging'
        uses: ./workflows/.github/shared-actions/tag-versions
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository_name: ${{ inputs.repository_name }}
          environment: staging
          docker_hub_user: ${{ secrets.docker_hub_user }}
          docker_hub_password: ${{ secrets.docker_hub_password }}
          current_tag: ${{ inputs.tag }}
#  us-deployment:
#    needs: deploy-to-staging
#    name: 'Deploy to US production'
#    runs-on: ubuntu-latest
#    environment:
#      name: production-us
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Deploy to production US
#        uses: ./.github/actions/deploy
#        with:
#          environment: production-us
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          repository_name: ${{ github.repository }}
#          docker_hub_user: ${{ secrets.DOCKER_HUB_USER }}
#          docker_hub_password: ${{ secrets.DOCKER_HUB_PASSWORD }}
#  eu-deployment:
#    name: 'Deploy to EU production'
#    needs: deploy-to-staging
#    runs-on: ubuntu-latest
#    environment:
#      name: production-global
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Deploy to production global
#        uses: ./.github/actions/deploy
#        with:
#          environment: production-global
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          repository_name: ${{ github.repository }}
#          docker_hub_user: ${{ secrets.DOCKER_HUB_USER }}
#          docker_hub_password: ${{ secrets.DOCKER_HUB_PASSWORD }}

#  failed-pipeline:
#    name: Failure Notification
#    if: filure()
#    runs-on: ubuntu-latest
#    steps:
#      - name: Send OpsGenie Alert
#        uses: eonx-com/actions-opsgenie@master
#        with:
#          API_KEY: ${{ secrets.OPSGENIE_API_KEY }}
#          PRIORITY: 'P3'
#          ALIAS: 'pipeline-failed'
#          MESSAGE: '${{ github.repository }} MASTER build has failed'
